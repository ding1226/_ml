import torch
import torch.nn as nn
import torch.optim as optim

# 1. 資料 (4 個點，標籤 0 或 1)
x_data = torch.tensor([[0,0],[0,1],[1,0],[1,1]], dtype=torch.float32)
y_data = torch.tensor([[0],[1],[1],[0]], dtype=torch.float32)  # XOR 類型

# 2. 定義簡單神經網路
class SimpleNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.layer1 = nn.Linear(2, 4)
        self.layer2 = nn.Linear(4, 1)
    
    def forward(self, x):
        x = torch.relu(self.layer1(x))
        x = torch.sigmoid(self.layer2(x))
        return x

model = SimpleNN()

# 3. 損失函數與優化器
criterion = nn.BCELoss()  # 二元交叉熵損失
optimizer = optim.SGD(model.parameters(), lr=0.1)

# 4. 訓練模型
for epoch in range(5000):
    optimizer.zero_grad()
    y_pred = model(x_data)
    loss = criterion(y_pred, y_data)
    loss.backward()
    optimizer.step()
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss.item():.4f}")

# 5. 預測
with torch.no_grad():
    y_pred = model(x_data)
    predicted = (y_pred > 0.5).float()
    print("預測結果:\n", predicted)
